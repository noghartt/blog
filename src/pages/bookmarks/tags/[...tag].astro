---
import type { GetStaticPathsResult } from 'astro';
import { getCollection } from 'astro:content';

import Layout from '../../../layout/Layout.astro';
import Link from '../../../components/Link.astro';
import GoBackButton from '../../../components/GoBackButton.astro';

const [bookmarksJson] = await getCollection('bookmarks');

export async function getStaticPaths(): Promise<GetStaticPathsResult> {
  const bookmarksPerTag = bookmarksJson.data.data.reduce((acc, bookmark) => {
    bookmark.tags.forEach((tag: string) => {
      if (!acc[tag]) {
        acc[tag] = [];
      }
      acc[tag].push(bookmark);
    });
    return acc;
  }, {});

  const bookmarksWithoutTags = bookmarksJson.data.data.filter((bookmark) => bookmark.tags.length === 0);
  bookmarksPerTag['without-tags'] = bookmarksWithoutTags;

  const aggregateBookmarks = (tag: string, acc: any = []) => {
    for (const subTag in bookmarksPerTag) {
      if (subTag === tag || subTag.startsWith(`${tag}/`)) {
        acc.push(...bookmarksPerTag[subTag]);
      }
    }
    return acc;
  };

  const allTags = Object.keys(bookmarksPerTag);
  const uniqueTags = new Set<string>();

  allTags.forEach(tag => {
    const parts = tag.split('/');
    for (let i = 1; i <= parts.length; i++) {
      uniqueTags.add(parts.slice(0, i).join('/'));
    }
  });

  return Array.from(uniqueTags).map((tag) => {
    const aggregatedBookmarks = aggregateBookmarks(tag);
    return {
      params: {
        tag,
      },
      props: {
        bookmarks: aggregatedBookmarks.map(bookmark => ({
          url: bookmark.url,
          title: bookmark.title,
        })),
      },
    };
  });
}

const { tag } = Astro.params;
const { bookmarks } = Astro.props;
---

<Layout>
  <div class="header">
    <GoBackButton />
    <Link href="/bookmarks/tags">
      Bookmarks categorized by tags
    </Link>
  </div>
  <section class="tag-container">
    <h1>{tag}.</h1>
    <section>
      <ul>
        {bookmarks.map((bookmark) => (
          <li>
            <Link href={bookmark.url} target="_blank" rel="noopener noreferrer" isExternal>
              {bookmark.title}
            </Link>
          </li>
        ))}
      </ul>
    </section>
  </section>
</Layout>

<style>
  .header {
    display: flex;
    gap: var(--spacing-2x);
  }

  .tag-container {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-2x);
  }

  ul {
    display: flex;
    flex-direction: column;
    gap: var(--spacing);
  }

  ul li {
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    column-gap: var(--spacing-8x);
  }

  ul li :global(a) {
    flex: 1;
    overflow-wrap: anywhere;
  }
</style>